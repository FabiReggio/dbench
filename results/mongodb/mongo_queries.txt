# Time Bucket
# Jongo Method
db.twitter_sample.group({ 
    cond: {"created_at": {$regex : 'Sun Aug 05 14:10' }}, 
    key: {},   initial: {sum: 0},   
    reduce: function(doc, prev) { prev.sum += 1} 
});


# Most Retweeted Tweet
db.twitter_sample.find(
     {}, 
     {"text" : 1, "retweet_count" : 1}
).sort({"retweet_count": -1})






# Most Mentioned Account
# MAP-REDUCE Method
var map = function() {
    if (!this.entities) {
        return;
    }
    
    this.entities.user_mentions.forEach(
        function(mention) {
            if(mention.screen_name !== undefined) {
                emit(mention.screen_name, { count: 1 });
            }
        }
    )
};

var reduce = function(key, values) {
    // NB: reduce() uses same format as results emitted by map()
    var result = { count: 0 };

    values.forEach(function(value) {
        result.count += value.count;
    });

    return result;
};

result = db.runCommand({
	"mapreduce" : "query_test_collection",
	"map" : map,
	"reduce" : reduce,
	"out" : "user_mentions"
});

db.user_mentions.find({}).sort({ "value.count" : -1});


# AGGREGATE Method
var result = db.query_test_collection.aggregate(
    {   
        $project: {
            _id: 0,
            "entities.user_mentions" : 1
        }
    },
    {   $unwind: "$entities.user_mentions" },
    {   
        $group : {
            _id: "$entities.user_mentions.screen_name",
            count: { $sum : 1 }
        }
    },
    {   
        $sort : {
            "count" : -1
        }
    },
    {   $limit : 1000 }
)






# Most Hashed Tags
# MAP-REDUCE Method
var map = function() {
    this.entities.hashtags.forEach(function(hashtag) {
        emit(hashtag.text, { count: 1 });
    })
};

var reduce = function(key, values) {
    // NB: reduce() uses same format as results emitted by map()
    var result = { count: 0 };

    values.forEach(function(value) {
        result.count += value.count;
    });

    return result;
};

result = db.runCommand({
	"mapreduce" : "twitter_sample",
	"map" : map,
	"reduce" : reduce,
	"out" : "hash_tags"
});

db.hash_tags.find({}).sort({ "value.count" : -1});



# AGGREGATE Method
var result = db.twitter_sample.aggregate(
    {   
        $project: {
            _id: 0,
            "entities.hashtags" : 1
        }
    },
    {   $unwind: "$entities.hashtags"},
    {   
        $group : {
            _id: "$entities.hashtags.text",
            count: { $sum : 1 }
        }
    },
    {   
        $sort : {
            "count" : -1
        }
    }
)












# Most Shared Link
# MAP-REDUCE Method
var map = function() {
    if (!this.entities) { return; }
    this.entities.urls.forEach(function(url) {
        emit(url.expanded_url, { count: 1 });
    })
};

var reduce = function(key, values) {
    // NB: reduce() uses same format as results emitted by map()
    var result = { count: 0 };

    values.forEach(function(value) {
        result.count += value.count;
    });

    return result;
};

result = db.runCommand({
    "mapreduce" : "query_test_collection",
    "map" : map,
    "reduce" : reduce,
    "out" : "url"
});

db.url.find({}).sort({ "value.count" : -1});


# AGGREGATE Method
var result = db.query_test_collection.aggregate(
    {   
        $project: {
            _id: 0,
            "entities.urls" : 1
        }
    },
    {   $unwind: "$entities.urls"},
    {   
        $group : {
            _id: "$entities.urls.expanded_url",
            count: { $sum : 1 }
        }
    },
    {   
        $sort : {
            "count" : -1
        }
    },
    {   $limit : 5 }
)





# INDEXING QUERIES
# time bucket 
db.query_test_collection.ensureIndex({ "created_at" : 1 })

# most user mentions
db.query_test_collection.ensureIndex({ 
    "entities.user_mentions.screen_name" : 1 
})

# most hash tags 
db.query_test_collection.ensureIndex({ 
    "entities.hash_tags.text" : 1 
})

# most shared urls 
db.query_test_collection.ensureIndex({ 
    "entities.urls.expanded_url" : 1 
})

